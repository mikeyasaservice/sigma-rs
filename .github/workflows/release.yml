name: Release & Deployment

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v0.1.0)'
        required: true
        type: string
      release_type:
        description: 'Type of release'
        required: false
        default: 'stable'
        type: choice
        options:
        - stable
        - beta
        - alpha

permissions:
  contents: write
  packages: write
  id-token: write

env:
  RUST_BACKTRACE: 1
  CARGO_TERM_COLOR: always

jobs:
  # ================================
  # Pre-Release Validation
  # ================================
  pre-release-validation:
    name: Pre-Release Validation
    runs-on: ubuntu-latest
    timeout-minutes: 30
    outputs:
      version: ${{ steps.version.outputs.version }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract version information
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${{ github.ref_name }}"
          fi
          
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          
          # Determine if this is a prerelease
          if [[ "${VERSION}" =~ (alpha|beta|rc) ]] || [ "${{ github.event.inputs.release_type }}" != "stable" ]; then
            echo "is_prerelease=true" >> $GITHUB_OUTPUT
            echo "🔄 This is a pre-release: ${VERSION}"
          else
            echo "is_prerelease=false" >> $GITHUB_OUTPUT
            echo "✅ This is a stable release: ${VERSION}"
          fi

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2

      - name: Validate version in Cargo.toml
        run: |
          CARGO_VERSION=$(grep "^version =" Cargo.toml | head -1 | sed 's/version = "\(.*\)"/\1/')
          RELEASE_VERSION="${{ steps.version.outputs.version }}"
          
          # Remove 'v' prefix if present
          RELEASE_VERSION=${RELEASE_VERSION#v}
          
          echo "Cargo.toml version: ${CARGO_VERSION}"
          echo "Release version: ${RELEASE_VERSION}"
          
          if [ "${CARGO_VERSION}" != "${RELEASE_VERSION}" ]; then
            echo "❌ Version mismatch between Cargo.toml (${CARGO_VERSION}) and release (${RELEASE_VERSION})"
            exit 1
          else
            echo "✅ Version validation passed"
          fi

      - name: Run comprehensive tests
        run: |
          echo "🧪 Running comprehensive test suite before release..."
          
          # Run all tests
          cargo test --all-features --verbose
          
          # Run benchmarks to ensure they still work
          cargo bench --all-features -- --quick
          
          # Validate examples work
          cargo run --example rule_validator --all-features
          cargo run --example event_detector --all-features

      - name: Verify package can be published
        run: |
          echo "📦 Verifying package for publication..."
          cargo package --allow-dirty
          cargo publish --dry-run --all-features

      - name: Check changelog
        run: |
          if [ -f "CHANGELOG.md" ]; then
            echo "✅ Changelog found"
            
            # Check if changelog has been updated for this version
            if grep -q "${{ steps.version.outputs.version }}" CHANGELOG.md; then
              echo "✅ Changelog updated for this version"
            else
              echo "⚠️ Changelog may not be updated for this version"
            fi
          else
            echo "⚠️ No CHANGELOG.md found"
          fi

  # ================================
  # Create GitHub Release
  # ================================
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: pre-release-validation
    outputs:
      release_url: ${{ steps.create_release.outputs.html_url }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate release notes
        id: release_notes
        run: |
          echo "📝 Generating release notes..."
          
          VERSION="${{ needs.pre-release-validation.outputs.version }}"
          
          # Extract changelog section for this version if available
          if [ -f "CHANGELOG.md" ] && grep -q "${VERSION}" CHANGELOG.md; then
            echo "Using changelog for release notes"
            CHANGELOG_SECTION=$(sed -n "/## \[${VERSION#v}\]/,/## \[/p" CHANGELOG.md | head -n -1)
          else
            echo "Generating generic release notes"
            CHANGELOG_SECTION="## Changes

See commit history for detailed changes in this release.

## Installation

### Using Cargo
\`\`\`bash
cargo install sigma-rs
\`\`\`

### From Release Binaries
Download the appropriate binary for your platform from the assets below.

### Docker
\`\`\`bash
docker pull ghcr.io/${{ github.repository }}:${VERSION}
\`\`\`"
          fi
          
          cat > release_notes.md << EOF
          # Release ${VERSION}
          
          ${CHANGELOG_SECTION}
          
          ## Checksums
          
          SHA256 checksums for release binaries will be added automatically.
          
          ## Verification
          
          All binaries are signed and can be verified using the provided checksums.
          
          ---
          
          **Full Changelog**: https://github.com/${{ github.repository }}/compare/$(git describe --tags --abbrev=0 HEAD^)...${VERSION}
          EOF

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.pre-release-validation.outputs.version }}
          name: Release ${{ needs.pre-release-validation.outputs.version }}
          body_path: release_notes.md
          draft: false
          prerelease: ${{ needs.pre-release-validation.outputs.is_prerelease == 'true' }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
  # ================================
  # Cross-Platform Binary Building
  # ================================
  build-release:
    name: Build Release Binaries
    needs: [pre-release-validation, create-release]
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            binary_postfix: ""
            cross: false
          - target: x86_64-apple-darwin
            os: macos-latest
            binary_postfix: ""
            cross: false
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            binary_postfix: ".exe"
            cross: false
          - target: aarch64-apple-darwin
            os: macos-latest
            binary_postfix: ""
            cross: false
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            binary_postfix: ""
            cross: true
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            binary_postfix: ""
            cross: true
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: release-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Install cross-compilation tools
        if: matrix.cross
        run: |
          cargo install cross --git https://github.com/cross-rs/cross

      - name: Setup cross compilation (ARM64 Linux)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV

      - name: Setup musl target
        if: matrix.target == 'x86_64-unknown-linux-musl'
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools

      - name: Build release binary
        run: |
          echo "🔨 Building release binary for ${{ matrix.target }}..."
          
          if [ "${{ matrix.cross }}" = "true" ]; then
            cross build --release --target ${{ matrix.target }} --all-features
          else
            cargo build --release --target ${{ matrix.target }} --all-features
          fi
          
          echo "✅ Binary built successfully"

      - name: Test binary
        if: matrix.cross == false
        run: |
          echo "🧪 Testing release binary..."
          ./target/${{ matrix.target }}/release/sigma-rs${{ matrix.binary_postfix }} --help
          echo "✅ Binary test passed"

      - name: Generate checksums
        run: |
          echo "🔐 Generating checksums..."
          cd target/${{ matrix.target }}/release
          
          if [ "${{ runner.os }}" = "Windows" ]; then
            certutil -hashfile sigma-rs${{ matrix.binary_postfix }} SHA256 > sigma-rs${{ matrix.binary_postfix }}.sha256
          else
            sha256sum sigma-rs${{ matrix.binary_postfix }} > sigma-rs${{ matrix.binary_postfix }}.sha256
          fi
          
          echo "Checksum for ${{ matrix.target }}:"
          cat sigma-rs${{ matrix.binary_postfix }}.sha256

      - name: Package binary
        run: |
          echo "📦 Packaging binary for ${{ matrix.target }}..."
          cd target/${{ matrix.target }}/release
          
          if [ "${{ runner.os }}" = "Windows" ]; then
            # Create zip for Windows
            7z a sigma-rs-${{ needs.pre-release-validation.outputs.version }}-${{ matrix.target }}.zip sigma-rs${{ matrix.binary_postfix }} sigma-rs${{ matrix.binary_postfix }}.sha256
            mv sigma-rs-${{ needs.pre-release-validation.outputs.version }}-${{ matrix.target }}.zip ../../../
          else
            # Create tar.gz for Unix systems
            tar czf sigma-rs-${{ needs.pre-release-validation.outputs.version }}-${{ matrix.target }}.tar.gz sigma-rs${{ matrix.binary_postfix }} sigma-rs${{ matrix.binary_postfix }}.sha256
            mv sigma-rs-${{ needs.pre-release-validation.outputs.version }}-${{ matrix.target }}.tar.gz ../../../
          fi

      - name: Upload release asset
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.pre-release-validation.outputs.version }}
          files: |
            sigma-rs-${{ needs.pre-release-validation.outputs.version }}-${{ matrix.target }}.*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
  # ================================
  # Publish to Crates.io
  # ================================
  publish-crates:
    name: Publish to crates.io
    runs-on: ubuntu-latest
    needs: [pre-release-validation, create-release, build-release]
    timeout-minutes: 15
    if: ${{ needs.pre-release-validation.outputs.is_prerelease == 'false' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2

      - name: Final validation before publish
        run: |
          echo "🔍 Final validation before publishing to crates.io..."
          
          # Ensure we can build and test
          cargo build --all-features
          cargo test --all-features
          
          # Dry run publish
          cargo publish --dry-run --all-features

      - name: Publish to crates.io
        run: |
          echo "📦 Publishing to crates.io..."
          cargo publish --all-features
          echo "✅ Successfully published to crates.io"
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CRATES_IO_TOKEN }}

      - name: Verify publication
        run: |
          echo "✅ Verifying publication..."
          sleep 30  # Wait for crates.io to process
          
          # Try to install from crates.io
          cargo install sigma-rs --version ${{ needs.pre-release-validation.outputs.version }} --force || echo "Installation verification will be available shortly"

  # ================================
  # Docker Multi-Platform Publishing
  # ================================
  docker-publish:
    name: Publish Docker Images
    runs-on: ubuntu-latest
    needs: [pre-release-validation, create-release]
    timeout-minutes: 45
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in to Docker Hub (optional)
        if: secrets.DOCKER_HUB_TOKEN != ''
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix={{branch}}-
          labels: |
            org.opencontainers.image.title=Sigma-rs
            org.opencontainers.image.description=High-performance Rust implementation of the Sigma rule engine
            org.opencontainers.image.vendor=Sigma-rs Contributors
            org.opencontainers.image.licenses=Apache-2.0

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ needs.pre-release-validation.outputs.version }}

      - name: Test Docker image
        run: |
          echo "🐳 Testing Docker image..."
          
          # Test the image works
          docker run --rm ghcr.io/${{ github.repository }}:${{ needs.pre-release-validation.outputs.version }} --help
          
          echo "✅ Docker image test passed"

  # ================================
  # Security Attestation
  # ================================
  security-attestation:
    name: Generate Security Attestation
    runs-on: ubuntu-latest
    needs: [pre-release-validation, build-release, docker-publish]
    timeout-minutes: 10
    permissions:
      id-token: write
      attestations: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Attest SBOM
        uses: actions/attest-sbom@v1
        with:
          subject-path: sbom.spdx.json
          sbom-path: sbom.spdx.json

      - name: Generate build provenance
        uses: actions/attest-build-provenance@v1
        with:
          subject-path: sbom.spdx.json

  # ================================
  # Post-Release Validation
  # ================================
  post-release-validation:
    name: Post-Release Validation
    runs-on: ubuntu-latest
    needs: [publish-crates, docker-publish, security-attestation]
    timeout-minutes: 15
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate release completeness
        run: |
          echo "✅ Validating release completeness..."
          
          VERSION="${{ needs.pre-release-validation.outputs.version }}"
          
          # Check GitHub release
          if curl -s "https://api.github.com/repos/${{ github.repository }}/releases/tags/${VERSION}" | grep -q "tag_name"; then
            echo "✅ GitHub release created successfully"
          else
            echo "❌ GitHub release not found"
            exit 1
          fi
          
          # Check Docker image
          if docker pull ghcr.io/${{ github.repository }}:${VERSION} > /dev/null 2>&1; then
            echo "✅ Docker image available"
          else
            echo "❌ Docker image not accessible"
          fi
          
          echo "🎉 Release validation completed successfully"

      - name: Create release summary
        run: |
          cat > release-summary.md << 'EOF'
          # Release Summary: ${{ needs.pre-release-validation.outputs.version }}
          
          ## Release Status
          
          | Component | Status | Notes |
          |-----------|---------|-------|
          | Pre-Release Validation | ✅ Passed | All checks completed |
          | GitHub Release | ✅ Created | Release notes generated |
          | Binary Builds | ✅ Completed | Multi-platform binaries |
          | Crates.io Publication | ${{ needs.publish-crates.result }} | Stable releases only |
          | Docker Images | ${{ needs.docker-publish.result }} | Multi-architecture |
          | Security Attestation | ${{ needs.security-attestation.result }} | SBOM and provenance |
          
          ## Artifacts Generated
          
          - ✅ Cross-platform binaries (6 targets)
          - ✅ SHA256 checksums for all binaries
          - ✅ Docker images (linux/amd64, linux/arm64)
          - ✅ SBOM and build provenance
          - ✅ Security attestations
          
          ## Installation Methods
          
          ### Cargo
          ```bash
          cargo install sigma-rs
          ```
          
          ### Docker
          ```bash
          docker pull ghcr.io/${{ github.repository }}:${{ needs.pre-release-validation.outputs.version }}
          ```
          
          ### Binary Download
          Download from [GitHub Releases](https://github.com/${{ github.repository }}/releases/tag/${{ needs.pre-release-validation.outputs.version }})
          
          ## Next Steps
          
          - Monitor for any issues with the release
          - Update documentation if needed
          - Announce the release through appropriate channels
          
          ---
          Generated on: $(date)
          EOF

      - name: Upload release summary
        uses: actions/upload-artifact@v4
        with:
          name: release-summary
          path: release-summary.md
          retention-days: 365

  # ================================
  # Release Success Notification
  # ================================
  release-complete:
    name: 🎉 Release Complete
    runs-on: ubuntu-latest
    needs: [pre-release-validation, create-release, build-release, publish-crates, docker-publish, security-attestation, post-release-validation]
    if: always()
    steps:
      - name: Release status summary
        run: |
          echo "🎉 Release Pipeline Complete for ${{ needs.pre-release-validation.outputs.version }}"
          echo "=================================================="
          echo ""
          echo "Pre-Release Validation: ${{ needs.pre-release-validation.result }}"
          echo "GitHub Release: ${{ needs.create-release.result }}"
          echo "Binary Builds: ${{ needs.build-release.result }}"
          echo "Crates.io Publication: ${{ needs.publish-crates.result }}"
          echo "Docker Publishing: ${{ needs.docker-publish.result }}"
          echo "Security Attestation: ${{ needs.security-attestation.result }}"
          echo "Post-Release Validation: ${{ needs.post-release-validation.result }}"
          echo ""
          
          # Determine overall success
          if [[ "${{ needs.pre-release-validation.result }}" == "success" && 
                "${{ needs.create-release.result }}" == "success" && 
                "${{ needs.build-release.result }}" == "success" && 
                "${{ needs.docker-publish.result }}" == "success" ]]; then
            echo "🚀 Release ${{ needs.pre-release-validation.outputs.version }} completed successfully!"
            echo "📦 All artifacts published and validated"
            echo "🔒 Security attestations generated"
            echo ""
            echo "Release URL: ${{ needs.create-release.outputs.release_url }}"
          else
            echo "⚠️ Some release steps encountered issues"
            echo "📋 Check individual job results for details"
          fi