// This file is @generated by prost-build.
/// Request to evaluate a single event
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EvaluateEventRequest {
    /// Event data as JSON string
    #[prost(string, tag = "1")]
    pub event_json: ::prost::alloc::string::String,
    /// Optional rule filter (evaluate only specific rules)
    #[prost(string, repeated, tag = "2")]
    pub rule_ids: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
/// Response for event evaluation
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EvaluateEventResponse {
    /// Whether any rules matched
    #[prost(bool, tag = "1")]
    pub matched: bool,
    /// List of rule matches
    #[prost(message, repeated, tag = "2")]
    pub matches: ::prost::alloc::vec::Vec<RuleMatch>,
    /// Total number of rules evaluated
    #[prost(uint32, tag = "3")]
    pub rules_evaluated: u32,
    /// Evaluation time in milliseconds
    #[prost(uint64, tag = "4")]
    pub evaluation_time_ms: u64,
    /// Error message if evaluation failed
    #[prost(string, tag = "5")]
    pub error: ::prost::alloc::string::String,
}
/// Individual rule match result
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RuleMatch {
    /// Rule identifier
    #[prost(string, tag = "1")]
    pub rule_id: ::prost::alloc::string::String,
    /// Rule title
    #[prost(string, tag = "2")]
    pub rule_title: ::prost::alloc::string::String,
    /// Whether this rule matched
    #[prost(bool, tag = "3")]
    pub matched: bool,
    /// Rule evaluation time in milliseconds
    #[prost(uint64, tag = "4")]
    pub evaluation_time_ms: u64,
    /// Match confidence (0.0 to 1.0)
    #[prost(float, tag = "5")]
    pub confidence: f32,
    /// Additional metadata
    #[prost(map = "string, string", tag = "6")]
    pub metadata: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
}
/// Health check request
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HealthRequest {}
/// Health check response
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HealthResponse {
    /// Service status (healthy, degraded, unhealthy)
    #[prost(string, tag = "1")]
    pub status: ::prost::alloc::string::String,
    /// Service version
    #[prost(string, tag = "2")]
    pub version: ::prost::alloc::string::String,
    /// Uptime in seconds
    #[prost(uint64, tag = "3")]
    pub uptime_seconds: u64,
    /// Additional health details
    #[prost(map = "string, string", tag = "4")]
    pub details: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
}
/// Metrics request
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MetricsRequest {}
/// Metrics response
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MetricsResponse {
    /// Number of rules loaded
    #[prost(uint32, tag = "1")]
    pub rules_loaded: u32,
    /// Total events processed since start
    #[prost(uint64, tag = "2")]
    pub events_processed: u64,
    /// Total matches found since start
    #[prost(uint64, tag = "3")]
    pub matches_found: u64,
    /// Average processing time in milliseconds
    #[prost(double, tag = "4")]
    pub avg_processing_time_ms: f64,
    /// Current memory usage in bytes
    #[prost(uint64, tag = "5")]
    pub memory_usage_bytes: u64,
    /// Performance metrics
    #[prost(message, optional, tag = "6")]
    pub performance: ::core::option::Option<PerformanceMetrics>,
}
/// Performance metrics
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PerformanceMetrics {
    /// Events per second
    #[prost(double, tag = "1")]
    pub events_per_second: f64,
    /// 50th percentile processing time in milliseconds
    #[prost(double, tag = "2")]
    pub p50_processing_time_ms: f64,
    /// 95th percentile processing time in milliseconds
    #[prost(double, tag = "3")]
    pub p95_processing_time_ms: f64,
    /// 99th percentile processing time in milliseconds
    #[prost(double, tag = "4")]
    pub p99_processing_time_ms: f64,
    /// Error rate (0.0 to 1.0)
    #[prost(double, tag = "5")]
    pub error_rate: f64,
}
/// List rules request
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListRulesRequest {
    /// Optional filter by status
    #[prost(string, optional, tag = "1")]
    pub status_filter: ::core::option::Option<::prost::alloc::string::String>,
    /// Pagination
    #[prost(uint32, tag = "2")]
    pub page_size: u32,
    #[prost(string, tag = "3")]
    pub page_token: ::prost::alloc::string::String,
}
/// List rules response
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListRulesResponse {
    /// Rule summaries
    #[prost(message, repeated, tag = "1")]
    pub rules: ::prost::alloc::vec::Vec<RuleSummary>,
    /// Next page token
    #[prost(string, tag = "2")]
    pub next_page_token: ::prost::alloc::string::String,
    /// Total number of rules
    #[prost(uint32, tag = "3")]
    pub total_count: u32,
}
/// Rule summary information
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RuleSummary {
    /// Rule identifier
    #[prost(string, tag = "1")]
    pub rule_id: ::prost::alloc::string::String,
    /// Rule title
    #[prost(string, tag = "2")]
    pub rule_title: ::prost::alloc::string::String,
    /// Rule description
    #[prost(string, tag = "3")]
    pub description: ::prost::alloc::string::String,
    /// Rule status (enabled, disabled)
    #[prost(string, tag = "4")]
    pub status: ::prost::alloc::string::String,
    /// Rule level (low, medium, high, critical)
    #[prost(string, tag = "5")]
    pub level: ::prost::alloc::string::String,
    /// Rule tags
    #[prost(string, repeated, tag = "6")]
    pub tags: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// Last modified timestamp
    #[prost(int64, tag = "7")]
    pub last_modified: i64,
}
/// Stream evaluation request
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StreamEvaluateRequest {
    /// Event data as JSON string
    #[prost(string, tag = "1")]
    pub event_json: ::prost::alloc::string::String,
    /// Sequence number for ordering
    #[prost(uint64, tag = "2")]
    pub sequence: u64,
    /// Optional metadata
    #[prost(map = "string, string", tag = "3")]
    pub metadata: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
}
/// Stream evaluation response
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StreamEvaluateResponse {
    /// Request sequence number
    #[prost(uint64, tag = "1")]
    pub sequence: u64,
    /// Evaluation result
    #[prost(message, optional, tag = "2")]
    pub result: ::core::option::Option<EvaluateEventResponse>,
    /// Processing timestamp
    #[prost(int64, tag = "3")]
    pub timestamp: i64,
}
/// Generated client implementations.
pub mod sigma_service_client {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Sigma rule evaluation service
    #[derive(Debug, Clone)]
    pub struct SigmaServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl SigmaServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> SigmaServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> SigmaServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + Send + Sync,
        {
            SigmaServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Evaluate a single event against all rules
        pub async fn evaluate_event(
            &mut self,
            request: impl tonic::IntoRequest<super::EvaluateEventRequest>,
        ) -> std::result::Result<
            tonic::Response<super::EvaluateEventResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/sigma.SigmaService/EvaluateEvent",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("sigma.SigmaService", "EvaluateEvent"));
            self.inner.unary(req, path, codec).await
        }
        /// Get service health status
        pub async fn get_health(
            &mut self,
            request: impl tonic::IntoRequest<super::HealthRequest>,
        ) -> std::result::Result<tonic::Response<super::HealthResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/sigma.SigmaService/GetHealth",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("sigma.SigmaService", "GetHealth"));
            self.inner.unary(req, path, codec).await
        }
        /// Get service metrics
        pub async fn get_metrics(
            &mut self,
            request: impl tonic::IntoRequest<super::MetricsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::MetricsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/sigma.SigmaService/GetMetrics",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("sigma.SigmaService", "GetMetrics"));
            self.inner.unary(req, path, codec).await
        }
        /// List loaded rules
        pub async fn list_rules(
            &mut self,
            request: impl tonic::IntoRequest<super::ListRulesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListRulesResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/sigma.SigmaService/ListRules",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("sigma.SigmaService", "ListRules"));
            self.inner.unary(req, path, codec).await
        }
        /// Stream evaluation of multiple events
        pub async fn stream_evaluate(
            &mut self,
            request: impl tonic::IntoStreamingRequest<
                Message = super::StreamEvaluateRequest,
            >,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::StreamEvaluateResponse>>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/sigma.SigmaService/StreamEvaluate",
            );
            let mut req = request.into_streaming_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("sigma.SigmaService", "StreamEvaluate"));
            self.inner.streaming(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod sigma_service_server {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with SigmaServiceServer.
    #[async_trait]
    pub trait SigmaService: Send + Sync + 'static {
        /// Evaluate a single event against all rules
        async fn evaluate_event(
            &self,
            request: tonic::Request<super::EvaluateEventRequest>,
        ) -> std::result::Result<
            tonic::Response<super::EvaluateEventResponse>,
            tonic::Status,
        >;
        /// Get service health status
        async fn get_health(
            &self,
            request: tonic::Request<super::HealthRequest>,
        ) -> std::result::Result<tonic::Response<super::HealthResponse>, tonic::Status>;
        /// Get service metrics
        async fn get_metrics(
            &self,
            request: tonic::Request<super::MetricsRequest>,
        ) -> std::result::Result<tonic::Response<super::MetricsResponse>, tonic::Status>;
        /// List loaded rules
        async fn list_rules(
            &self,
            request: tonic::Request<super::ListRulesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListRulesResponse>,
            tonic::Status,
        >;
        /// Server streaming response type for the StreamEvaluate method.
        type StreamEvaluateStream: tonic::codegen::tokio_stream::Stream<
                Item = std::result::Result<super::StreamEvaluateResponse, tonic::Status>,
            >
            + Send
            + 'static;
        /// Stream evaluation of multiple events
        async fn stream_evaluate(
            &self,
            request: tonic::Request<tonic::Streaming<super::StreamEvaluateRequest>>,
        ) -> std::result::Result<
            tonic::Response<Self::StreamEvaluateStream>,
            tonic::Status,
        >;
    }
    /// Sigma rule evaluation service
    #[derive(Debug)]
    pub struct SigmaServiceServer<T: SigmaService> {
        inner: _Inner<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    struct _Inner<T>(Arc<T>);
    impl<T: SigmaService> SigmaServiceServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            let inner = _Inner(inner);
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for SigmaServiceServer<T>
    where
        T: SigmaService,
        B: Body + Send + 'static,
        B::Error: Into<StdError> + Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            let inner = self.inner.clone();
            match req.uri().path() {
                "/sigma.SigmaService/EvaluateEvent" => {
                    #[allow(non_camel_case_types)]
                    struct EvaluateEventSvc<T: SigmaService>(pub Arc<T>);
                    impl<
                        T: SigmaService,
                    > tonic::server::UnaryService<super::EvaluateEventRequest>
                    for EvaluateEventSvc<T> {
                        type Response = super::EvaluateEventResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::EvaluateEventRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as SigmaService>::evaluate_event(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = EvaluateEventSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/sigma.SigmaService/GetHealth" => {
                    #[allow(non_camel_case_types)]
                    struct GetHealthSvc<T: SigmaService>(pub Arc<T>);
                    impl<
                        T: SigmaService,
                    > tonic::server::UnaryService<super::HealthRequest>
                    for GetHealthSvc<T> {
                        type Response = super::HealthResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::HealthRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as SigmaService>::get_health(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = GetHealthSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/sigma.SigmaService/GetMetrics" => {
                    #[allow(non_camel_case_types)]
                    struct GetMetricsSvc<T: SigmaService>(pub Arc<T>);
                    impl<
                        T: SigmaService,
                    > tonic::server::UnaryService<super::MetricsRequest>
                    for GetMetricsSvc<T> {
                        type Response = super::MetricsResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::MetricsRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as SigmaService>::get_metrics(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = GetMetricsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/sigma.SigmaService/ListRules" => {
                    #[allow(non_camel_case_types)]
                    struct ListRulesSvc<T: SigmaService>(pub Arc<T>);
                    impl<
                        T: SigmaService,
                    > tonic::server::UnaryService<super::ListRulesRequest>
                    for ListRulesSvc<T> {
                        type Response = super::ListRulesResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ListRulesRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as SigmaService>::list_rules(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = ListRulesSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/sigma.SigmaService/StreamEvaluate" => {
                    #[allow(non_camel_case_types)]
                    struct StreamEvaluateSvc<T: SigmaService>(pub Arc<T>);
                    impl<
                        T: SigmaService,
                    > tonic::server::StreamingService<super::StreamEvaluateRequest>
                    for StreamEvaluateSvc<T> {
                        type Response = super::StreamEvaluateResponse;
                        type ResponseStream = T::StreamEvaluateStream;
                        type Future = BoxFuture<
                            tonic::Response<Self::ResponseStream>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                tonic::Streaming<super::StreamEvaluateRequest>,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as SigmaService>::stream_evaluate(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = StreamEvaluateSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        Ok(
                            http::Response::builder()
                                .status(200)
                                .header("grpc-status", "12")
                                .header("content-type", "application/grpc")
                                .body(empty_body())
                                .unwrap(),
                        )
                    })
                }
            }
        }
    }
    impl<T: SigmaService> Clone for SigmaServiceServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    impl<T: SigmaService> Clone for _Inner<T> {
        fn clone(&self) -> Self {
            Self(Arc::clone(&self.0))
        }
    }
    impl<T: std::fmt::Debug> std::fmt::Debug for _Inner<T> {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            write!(f, "{:?}", self.0)
        }
    }
    impl<T: SigmaService> tonic::server::NamedService for SigmaServiceServer<T> {
        const NAME: &'static str = "sigma.SigmaService";
    }
}
